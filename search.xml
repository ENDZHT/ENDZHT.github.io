<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑客攻防技术宝典（web实战篇）</title>
      <link href="2020/11/07/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/"/>
      <url>2020/11/07/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-web-应用程序安全与风险"><a href="#第一章-web-应用程序安全与风险" class="headerlink" title="第一章 web 应用程序安全与风险"></a>第一章 web 应用程序安全与风险</h2><p><code>web应用程序面临的核心问题</code></p><ul><li>  <em>用户可提交任意输入</em></li><li>  <em>造成安全问题的各种因素</em></li></ul><blockquote><p>今日学习时间：2020/11/7 22:20-23:40 ，学习内容：web 实战 42-47 页，学习心得如下：</p></blockquote><h3 id="Web-应用程序的发展历程及安全威胁"><a href="#Web-应用程序的发展历程及安全威胁" class="headerlink" title="Web 应用程序的发展历程及安全威胁"></a>Web 应用程序的发展历程及安全威胁</h3><p> 早期阶段：网站内容基本是包含静态文档的信息库，信息流仅由服务器向浏览器单向传送，主要安全威胁是 web 服务器软件的漏洞；</p><p> 现阶段：网站大多是 web 应用程序，可以在服务器和浏览器之间双向信息传递，主要安全威胁是服务器存在敏感信息、web 应用程序开发者不能保证开发安全、web 应用程序与计算机系统连接紧密</p><p>web 应用程序的常用功能</p><ul><li>  购物（Amazon、taobao、jd、suning、pdd…）</li><li>  社交网络（Facebook、Instagram…）</li><li>  银行服务（Citibank、boc、abchnia、ccb、icbc…）</li><li>  web 搜索（Google、baidu、bing…）</li><li>  拍卖（eBay）</li><li>  博彩与投机（Betfair）</li><li>  博客（Blogger）</li><li>  web 邮件（Gmail、outlook…）</li><li>  交互信息（Wikipedia）</li><li>  新闻资讯（reuters、toutiao）</li><li>  视频（YouTube、youku、bilibili）</li><li>  云桌面、在线软件</li></ul><p>web 在组织内部的应用</p><ul><li>  组织成员管理（OA、HR…）</li><li>  资源管理（k8s、宝塔…）</li><li>  协同办公、云文档</li><li>  企业资源规划（ERP）</li><li>  web 邮件</li><li>  Google Apps、Microsoft Office Live</li></ul><p>web 应用程序的优点</p><ul><li>  使用 http 协议，轻量级、无连接、容错性、安全通信</li><li>  无需独立的客户端，服务端修改就可以在浏览器上生效</li><li>  浏览器功能强大，支持拓展</li><li>  web 应用开发相对简单</li></ul><h3 id="web-应用程序安全"><a href="#web-应用程序安全" class="headerlink" title="web 应用程序安全"></a>web 应用程序安全</h3><ul><li>  web 应用缺陷“与时俱进”，不能保证开发人员具有安全开发的能力</li><li>  web 浏览器的安全功能的加强，可以对<code>xss</code>、<code>csrf</code>等攻击有一定的阻力</li><li>  应用级拒绝服务攻击，<code>cc攻击</code>；网络级拒绝服务攻击，<code>Dos攻击</code>；分布式网络级拒绝服务攻击，<code>DDos攻击</code></li></ul><blockquote><p>今日学习时间：2020/11/8 18:00-21:00，学习内容：web 实战 48- 55 页，学习心得如下：</p></blockquote><h4 id="“本站点是安全的”"><a href="#“本站点是安全的”" class="headerlink" title="“本站点是安全的”"></a>“本站点是安全的”</h4><ul><li>SSL 无法保证 web 应用不被漏洞攻击，SSL 只能保证网络安全传输，不被中间人攻击利用</li></ul><ul><li><p><img src="/%E9%BB%91%E5%AE%A2%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF%E5%AE%9D%E5%85%B8%EF%BC%88web%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%89/image-20201108181203063.png" alt="image-20201108181203063"></p></li><li><p><img src="/images/image-20201108181203063.png"></p></li></ul><h4 id="核心安全问题：用户可提交任意输入"><a href="#核心安全问题：用户可提交任意输入" class="headerlink" title="核心安全问题：用户可提交任意输入"></a>核心安全问题：用户可提交任意输入</h4><p>应用程序无法控制客户端，用户几乎可以向服务器端应用提交任何输入。虽然可以使用 js 限制用户输入，但是 js 是可控的，服务端接收的任何数据都必须经过处理之后才能认为是安全的，可是这种处理可以对服务端的攻击，但不能防御对客户端的攻击，比如 xss，csrf 就是对客户端的攻击，而 ssrf、sql 注入这样的就针对服务端攻击。</p><p>可控输入</p><ul><li>  利用 http，修改请求头、请求体，cookie、参数等</li><li>  逻辑页面，正常逻辑的修改账号密码是 1.邮箱或手机验证 2.输入新的密码，但是如果第二个页面不需要第一个页面的限制的话，就可以直接访问第二个页面修改参数，直接修改密码</li><li>  burpsuite、python requests，各种抓包工具和利用编程语言的网络请求</li><li>  支付逻辑漏洞</li><li>  会话令牌窃取，xss 和 csrf 都是利用了令牌窃取</li><li>  利用应用程序处理过程的逻辑错误删除某些正常提交的参数（难道是变量覆盖，不明白什么疑似）</li><li>  sql 注入，owasp top1</li></ul><h4 id="关键问题因素"><a href="#关键问题因素" class="headerlink" title="关键问题因素"></a>关键问题因素</h4><p>主要是开发者原因，从主观和客观角度阐述为什么开发的应用可能存在安全问题。</p><ul><li>  缺乏安全开发经验</li><li>  使用第三方库存在安全问题</li><li>  防御不能和攻击抗衡，攻击和防御处在一个博弈下，就像超级病毒</li><li>  开发成本，时间、资源</li><li>  没有新的技术满足现阶段开发的要求</li><li>  功能越丰富，漏洞就越多，每一千行代码就有 14 个安全缺陷</li></ul><h4 id="新的安全边界"><a href="#新的安全边界" class="headerlink" title="新的安全边界"></a>新的安全边界</h4><p>和 web 应用有联系的都被划分进来，不再只是一台服务器而已。就个人理解和听到的一些看法，对内网安全大多数企业都很自信，认为攻击无法穿透防火墙，内网都是局域网，外部人员无法访问。看法没毛病，但是对内网的攻击几乎都是从内网发起的，外部网络无法直接连接进入内网，往往是有内网某终端发起的对外连接，特洛伊木马，内呼外应就能对内网攻击。防火墙的确可以阻止来自于外部网络的连接，添加策略即可，但很难不让内部访问外部网络，除非纯粹的内部网络，切断物理连接。</p><p>扯多了，新的安全边界包括应用本身、与应用数据相关的数据库、主机系统、第三方插件、甚至用户。web 应用本来就是让用户使用的，为了防御网络攻击切断网络层的连接确实也很有必要，waf 检测到来自一个 IP 的攻击就可以用网络级防火墙阻断连接。内部网络需要做很多策略来限制访问，对访问资源的限制，对主机的访问。</p><p>web 应用作为一个入口，访问内部网络，获取窃取用户数据或者攻击用户，这种情况下凡是使用具有潜在威胁 web 应用的用户都可能成为攻击者的目标或受害者。</p><h4 id="web-应用程序安全的未来"><a href="#web-应用程序安全的未来" class="headerlink" title="web 应用程序安全的未来"></a>web 应用程序安全的未来</h4><ul><li>  传统的安全问题虽然存在但是有了成熟的处理方案</li><li>  安全重心从服务端向客户端偏移</li><li>  新的技术出现，云、web2.0。这些技术的出现也带动了新的攻击方向，云安全也成了热门，的确云主机的出现能节约成本，但是鸡蛋在一个篮子里总有点担忧，云厂商在安全方面做了很大努力，对 DDos 的防御，还有阿里云高冗余的云服务，对数据有很大保证。曾经的服务端也变成了客户端，安全边界又发生了改变</li></ul><blockquote><p>第一章总结</p><p>web 应用是很多攻击的入口，安全边界包含的主体都可能成为攻击的协助者和受害者，很多攻击都是旁路的，第三方插件等。web 应用的安全问题很大原因是开发时期问题，安全开发经验、开放框架、开发成本、开发技术、还有防御策略。</p><p>云服务的出现给 web 应用提供了更安全的保障，但云安全也随之出现。</p></blockquote><h2 id="第二章-核心防御机制"><a href="#第二章-核心防御机制" class="headerlink" title="第二章 核心防御机制"></a>第二章 核心防御机制</h2><blockquote><p>今日学习时间：2020/11/9 22:30-23:00，学习内容：web 实战 56-60 页，学习心得如下：</p></blockquote><p>web 应用程序防御机制：</p><ul><li>  处理用户访问</li><li>  处理用户输入</li><li>  预防御</li><li>  应用监控</li></ul><h3 id="处理用户访问"><a href="#处理用户访问" class="headerlink" title="处理用户访问"></a>处理用户访问</h3><p>用户可以分为匿名用户（游客）、普通用户、管理员，匿名用户只能对公共资源访问，只能使用应用少部分功能；普通用户是应用的主要使用者，会与应用做很多交互，服务器存贮着普通用户的个人信息或者资源；管理员就是对应用做维护，对应用资源做管理，权限最高。</p><ul><li><p>身份验证</p><p>  使用服务端认为只能是用户才拥有的凭证作为验证。身份验证不能识别到人，只能做凭证鉴别。</p></li><li><p>会话管理</p><p>  避免每个请求都要重新做身份验证，需要一个临时身份证，是服务器为用户颁发的，只能做临时身份验证，过期即失效</p></li><li><p>访问控制</p><p>  资源划分，只能访问自己的资源或所属用户组的资源，避免越权访问</p></li></ul><p>对用户访问的处理就是解决非授权访问和越权访问，不仅要阻止恶意用户偷偷跑进来，也要阻止普通用户访问其他用户或者管理员的资源。</p><blockquote><p>今日学习时间：2020/11/10 22:10-22:50，学习内容：web 实战 61-68 页，学习心得如下：</p></blockquote><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><p>web 应用安全的核心问题是<strong>用户提交的数据不可信</strong>，对于用户或者攻击者提交的数据做处理，避免应用程序出现无法意料的情况。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><ul><li><p>黑名单</p><p>  对已知危险数据做处理，但是这种方法很可能被绕过，比如过滤文件后缀（php、php5、pht）</p></li><li><p>白名单</p><p>  只允许安全的数据</p></li><li><p>净化</p><p>  对危险数据做过滤或者进行编码</p></li><li><p>安全数据处理</p><p>  只能想到预编译了，可以避免闭合字符造成的 sql 注入</p></li><li><p>语法检查</p><p>  用合理的行为做不合理事，逻辑漏洞最为致命</p></li></ul><p>攻击方式多样也需要对提交数据做多样处理，一种处理机制很难处理多种攻击手段，比如针对 xss 做处理还要针对 sql 注入做处理。</p><p>安全边界，就是区分安全和不安全的界限。用户提交的数据不安全，经过服务器应用处理过的数据就算做安全，其实这样将不太准确。常常把内网和外网分为两个区域，内网是安全区域，外网是不安全区域，虽然内网被隔离，但是内网存在很大的安全隐患，一旦网络边界被突破，内网直接沦陷。内网安全现在已经被重视了，厂商也出了很多设备用来检测内网流量。</p><p>有点远了，对输入处理的安全边界确认更加细化，在内部处理过的数据也不能作为安全数据直接传递给下一个处理，要先经过安全检查后再传递，防止攻击者巧妙的利用 web 应用的处理程序生成恶意数据。还有就是对处理机制可能会有冲突，一个机制处理后的数据被下一个机制认为是恶意数据，书中提到赋予组件对恶意数据处理的能力，保证输入的数据没有可以被利用恶意数据，处理后交给下一个组件。有点绕了，总结一下，用户和服务之间存在安全边界，要经过处理后交给服务，服务内部有很多服务组件，交给服务组件时也要经过处理，组件处理后的结果再经过处理交给下一个组件，循环往复，保证输入输出都是安全数据。</p><p>针对可能安全处理有很多绕过方式，如果服务只对数据处理一次，就可以构造出被处理的数据依然可以执行的恶意数据，比如<code>&lt;scr&lt;script&gt;ipt&gt;</code>，程序过滤了<code>&lt;script&gt;</code>，过滤后的数据重新组成了<code>&lt;script&gt;</code>，多步确认要保证处理过的数据就是安全的。</p><p>规范化是指将数据转换或编码成常见字符集的过程。宽字节字节注入就是利用了中文字符集绕过过滤。针对规范化需要个人看法是统一一个环境，环境里只能有一种规范，进入环境就要先做规范化处理然后净化。</p><blockquote><p>今日学习时间：2020/11/11 20:10-21:00，学习内容：web 实战 69-73 页，学习心得如下：</p></blockquote><h3 id="处理攻击者"><a href="#处理攻击者" class="headerlink" title="处理攻击者"></a>处理攻击者</h3><p>将应用程序被攻击作为一个肯定的假设，其实能不能被攻击和应用的价值有很大关系，用户多业务重要的应用肯定被攻击的，自己写的小程序就自己用一般不会被攻击吧！！</p><ul><li><p>处理错误</p><p>  避免程序运行错误将错误信息直接返回，这样就暴漏了一些信息，还可能会被利用这些报错信息构造新的攻击手段。但是没有报错信息对于开发者就没办法调试程序，书中提到利用日志的方式，将错误信息记录方便对程序开发和维护。</p></li><li><p>维护审计日志</p><p>  将重要交互信息存储在日志里，如请求的 url、ip、时间等等，这些日志可以做为日后修复漏洞的信息还可以作为<strong>司法证据</strong>。对日志的保存要严格保存，避免未授权的读写，有效的保护方法就是将日志存放在仅能接受程序发送的更新信息的自治系统（在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。）中，自治系统和应用程序之间的通信是单向的。</p></li><li><p>向管理员发出警告</p><p>  报警机制会有很多误报情况，需要制定可行的策略。</p><p>  对于逻辑漏洞，最有效的方法是将报警机制与应用程序的输入确认机制和其他控制方法紧密结合起来。避免越权访问。</p></li><li><p>应对攻击</p><p>  给攻击者设置更多的阻碍是一种有效的深层防御措施。</p></li></ul><blockquote><p>今日学习时间：2020/11/12 22:00-22:45，学习内容：web 实战 74-76 页，学习心得如下：</p></blockquote><h3 id="管理应用程序"><a href="#管理应用程序" class="headerlink" title="管理应用程序"></a>管理应用程序</h3><p>web 应用的管理程序就是指 web 后台，web 应用一般都有一个后台用来管理整个 web，比如论坛对帖子的审核就是靠后台操作的。对一个 web 应用做渗透时，一般都会用扫描器扫描 web 应用的目录，能够找到 web 的后台地址就很方便了。</p><p>web 后台的登录验证很多时候会比用户登录的验证要简单，很多都是默认密码或者没有类似验证码的验证机制，可以对后台做爆破。</p><ul><li>  后台验证机制薄弱</li><li>  对后台的访问没有做严格的访问控制，普通用户也可以登录后台</li><li>  后台存在严重漏洞，很多情况都是拿下 web 后台然后通过后台拿下服务器</li><li>  对后台的安全测试不严格</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>使用相同框架写的 web 应用会有很大的潜在危险，一旦框架存在漏洞并被利用，所有使用该框架的 web 应有都可能会被拿下。一般都是利用谷歌语法找到使用某框架的 web 应用，然后批量扫描验证漏洞，这种方法很有针对性和准确性。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>为什么说应用程序处理用户访问的机制是所有机制中最薄弱的机制？<br>典型的应用程序使用三重机制（身份验证、会话管理和访问控制）来处理访问。这些组件之间高度相互依赖，其中任何一个组件存在缺陷都会降低整个访问控制并访问其他机制的效率。例如，攻击者可以利用身份验证机制中的漏洞以任何用户身份登录，并因此获得未授权访问权限。如果能够预测令牌，攻击者就可以假冒成任何已登录用户们的数据。如果访问控制不完善，则任何用户都可以直接使用应该受到保护的功能。</p></li><li><p>会话与会话令牌有何不同？<br>会话是服务器上保存的一组数据结构，用于追踪用户与应用程序交互的状态。会话令牌是应用程序为会话分配的一个特殊字符串，用户需要在连接提出请求的过程中提交该字符串，以重新确认自己的身份。</p><blockquote><p>给一个人打电话，拨通号码，然后对方问你是谁，然后你说你是谁谁谁，然后对方提高到你的名字就知道你是谁了，你的名字就是会话令牌，会话就是整个打电话的过程。客户端与服务端的会话不会这么多废话，服务器只会记录关键信息，但是信息交互的过程还是会存在。</p></blockquote></li><li><p>为何不可能始终使用基于白名单的方法进行输入确认？<br>许多时候，应用程序可能会被迫接受与已知为“良性”输入的列表或模式不匹配的待处理数据。例如，许多用户的姓名包含可用在各种攻击中的字符。如果应用程序希望允许用户以真实姓名注册，就需要接受可能的恶意输入，并确保安全处理这些输入。</p><blockquote><p>业务需求对于开发才是第一，一个不安全的应用没人用，一个啥也干不了的应用也不会有人用，但是在使用者和开发者眼中，能不能用才是重要的，安不安全对他们就不太重要。</p></blockquote></li><li><p>攻击者正在攻击一个执行管理功能的应用程序，并且不具有使用这项功能的任何有效证书。为何他仍然应当密切关注这项功能呢？<br>攻击者可以利用任何访问控制核心机制中的缺陷未授权访问管理功能。此外，攻击者以低权限用户身份提交的数据最终将向管理用户显示，因此，攻击者可以提交一些恶意数据，用于在管理用户查看这些数据时攻破他们的会话，从而对管理用户实施攻击。</p></li><li><p>旨在阻止跨站点脚本攻击的输入确认机制按以下顺序处理一个输入：<br>(1) 删除任何出现的<code>&lt;script&gt;</code>表达式；</p><p> (2) 将输入截短为 50 个字符；</p><p> (3) 删除输入中的引号；</p><p> (4) 对输入进行 URL 解码；</p><p> (5) 如果任何输入项被删除，返回步骤(1)。<br> 是否能够避开上述确认机制，让以下数据通过确认？<br> <code> "&gt;&lt;script&gt;alert(“foo”)&lt;/script&gt;</code><br> 是。如果没有第 4 步，此机制将是可靠的，能够过滤其旨在阻止的特定项目。但是，由于输入在执行过滤步骤后被解码，攻击者只需要对有效载荷中的选定字符进行 URL 编码，就可以避开这种过滤：<code> "&gt;</code><br> 如果首先执行第 4 步，或根本不执行该步骤，攻击者将不可能避开上述过滤。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 黑客攻防技术宝典（web实战篇） </tag>
            
            <tag> 信安之路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
